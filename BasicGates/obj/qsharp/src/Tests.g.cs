//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapper\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"op\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"Qubit\"},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":58},\"Item2\":{\"Line\":1,\"Column\":60}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"Qubit\"},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapper\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapper\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":82},\"Item2\":{\"Line\":1,\"Column\":89}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Kata.BasicGates.ArrayWrapper\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapper\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":82},\"Item2\":{\"Line\":1,\"Column\":89}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Kata.BasicGates.ArrayWrapper\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapper\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":82},\"Item2\":{\"Line\":1,\"Column\":89}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Kata.BasicGates.ArrayWrapper\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapperControlled\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":38,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"op\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"Qubit\"},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":37}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":68},\"Item2\":{\"Line\":1,\"Column\":70}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"Qubit\"},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapperControlled\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":38,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapperControlled\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":38,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":92},\"Item2\":{\"Line\":1,\"Column\":99}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Kata.BasicGates.ArrayWrapperControlled\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapperControlled\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":38,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":92},\"Item2\":{\"Line\":1,\"Column\":99}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Kata.BasicGates.ArrayWrapperControlled\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"ArrayWrapperControlled\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":38,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":92},\"Item2\":{\"Line\":1,\"Column\":99}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Kata.BasicGates.ArrayWrapperControlled\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"DumpDiff\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":45,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"N\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"statePrep\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":25},\"Item2\":{\"Line\":2,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"testImpl\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":25},\"Item2\":{\"Line\":3,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"refImpl\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":25},\"Item2\":{\"Line\":4,\"Column\":32}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"DumpDiff\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":45,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"DumpDiffOnOneQubit\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":73,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"testImpl\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"Qubit\"},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":39}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"refImpl\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"Qubit\"},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":35},\"Item2\":{\"Line\":2,\"Column\":42}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"Qubit\"},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"Qubit\"},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"DumpDiffOnOneQubit\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":73,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T101_StateFlip\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":82,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":83,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T101_StateFlip\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":83,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T102_BasisChange\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":91,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":92,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T102_BasisChange\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":92,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T103_SignFlip\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":100,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":101,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T103_SignFlip\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":101,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T104_AmplitudeChange\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":109,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":110,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T104_AmplitudeChange\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":110,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T105_PhaseFlip\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":125,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":126,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T105_PhaseFlip\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":126,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T106_PhaseChange\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":134,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":135,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T106_PhaseChange\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":135,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepForControlled\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":150,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":37}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepForControlled\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":150,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepForControlled\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":150,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":59},\"Item2\":{\"Line\":1,\"Column\":66}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Kata.BasicGates.StatePrepForControlled\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepForControlled\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":150,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":59},\"Item2\":{\"Line\":1,\"Column\":66}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Kata.BasicGates.StatePrepForControlled\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepForControlled\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":150,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":59},\"Item2\":{\"Line\":1,\"Column\":66}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Kata.BasicGates.StatePrepForControlled\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T107_GlobalPhaseChange\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":155,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":156,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T107_GlobalPhaseChange\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":156,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrep_BellState\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":173,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"state\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":51}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrep_BellState\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":173,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrep_BellState\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":173,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":69},\"Item2\":{\"Line\":1,\"Column\":76}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Kata.BasicGates.StatePrep_BellState\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrep_BellState\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":173,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":69},\"Item2\":{\"Line\":1,\"Column\":76}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Kata.BasicGates.StatePrep_BellState\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrep_BellState\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":173,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":69},\"Item2\":{\"Line\":1,\"Column\":76}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Kata.BasicGates.StatePrep_BellState\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"VerifyBellStateConversion\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":191,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"testOp\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"startState\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":87}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"targetState\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":95},\"Item2\":{\"Line\":1,\"Column\":106}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"VerifyBellStateConversion\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":191,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T108_BellStateChange1\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":213,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":214,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T108_BellStateChange1\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":214,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T109_BellStateChange2\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":221,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":222,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T109_BellStateChange2\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":222,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T110_BellStateChange3\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":229,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":230,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T110_BellStateChange3\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":230,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepRy\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":238,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":26}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepRy\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":238,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepRy\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":238,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":55}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Kata.BasicGates.StatePrepRy\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepRy\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":238,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":55}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Kata.BasicGates.StatePrepRy\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepRy\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":238,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":55}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Kata.BasicGates.StatePrepRy\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T201_TwoQubitGate1\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":242,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":243,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T201_TwoQubitGate1\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":243,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T202_TwoQubitGate2\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":271,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":272,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T202_TwoQubitGate2\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":272,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepMiscAmplitudes\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":293,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":38}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepMiscAmplitudes\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":293,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepMiscAmplitudes\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":293,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":67}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Kata.BasicGates.StatePrepMiscAmplitudes\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepMiscAmplitudes\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":293,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":67}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Kata.BasicGates.StatePrepMiscAmplitudes\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"StatePrepMiscAmplitudes\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":293,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":67}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Kata.BasicGates.StatePrepMiscAmplitudes\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"SwapWrapper\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":302,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":26}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"SwapWrapper\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":302,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"SwapWrapper\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":302,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":51}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Kata.BasicGates.SwapWrapper\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T203_TwoQubitGate3\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":306,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":307,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T203_TwoQubitGate3\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":307,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T204_ToffoliGate\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":315,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":316,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T204_ToffoliGate\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":316,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T205_FredkinGate\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":323,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" ------------------------------------------------------\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":324,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Kata.BasicGates\",\"Name\":\"T205_FredkinGate\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\zacha\\\\Dev\\\\Microsoft-Quantum-Katas\\\\BasicGates\\\\Tests.qs\",\"Position\":{\"Item1\":324,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
#line hidden
namespace Quantum.Kata.BasicGates
{
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 32, 39)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Adjoint, 32, 39)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Controlled, 32, 39)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.ControlledAdjoint, 32, 39)]
    public partial class ArrayWrapper : Unitary<(IUnitary,IQArray<Qubit>)>, ICallable
    {
        public ArrayWrapper(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IUnitary,IQArray<Qubit>)>, IApplyData
        {
            public In((IUnitary,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ArrayWrapper";
        String ICallable.FullName => "Quantum.Kata.BasicGates.ArrayWrapper";
        public override Func<(IUnitary,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (op,qs) = __in__;
#line 33 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            op.Apply(qs[0L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IUnitary,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (op,qs) = __in__;
#line 32 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            op.Adjoint.Apply(qs[0L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IUnitary,IQArray<Qubit>)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(op,qs)) = __in__;
#line 32 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            op.Controlled.Apply((__controlQubits__, qs[0L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IUnitary,IQArray<Qubit>)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(op,qs)) = __in__;
#line 32 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            op.Adjoint.Controlled.Apply((__controlQubits__, qs[0L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
        }

        public override IApplyData __DataIn__((IUnitary,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IUnitary op, IQArray<Qubit> qs)
        {
            return __m__.Run<ArrayWrapper, (IUnitary,IQArray<Qubit>), QVoid>((op, qs));
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 39, 46)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Adjoint, 39, 46)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Controlled, 39, 46)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.ControlledAdjoint, 39, 46)]
    public partial class ArrayWrapperControlled : Unitary<(IUnitary,IQArray<Qubit>)>, ICallable
    {
        public ArrayWrapperControlled(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IUnitary,IQArray<Qubit>)>, IApplyData
        {
            public In((IUnitary,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ArrayWrapperControlled";
        String ICallable.FullName => "Quantum.Kata.BasicGates.ArrayWrapperControlled";
        public override Func<(IUnitary,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (op,qs) = __in__;
#line 40 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            op.Controlled.Apply((new QArray<Qubit>(qs[0L]), qs[1L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IUnitary,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (op,qs) = __in__;
#line 39 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            op.Controlled.Adjoint.Apply((new QArray<Qubit>(qs[0L]), qs[1L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IUnitary,IQArray<Qubit>)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(op,qs)) = __in__;
#line 39 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            op.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(qs[0L]), qs[1L])));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IUnitary,IQArray<Qubit>)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(op,qs)) = __in__;
#line 39 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            op.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(qs[0L]), qs[1L])));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
        }

        public override IApplyData __DataIn__((IUnitary,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IUnitary op, IQArray<Qubit> qs)
        {
            return __m__.Run<ArrayWrapperControlled, (IUnitary,IQArray<Qubit>), QVoid>((op, qs));
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 46, 74)]
    public partial class DumpDiff : Operation<(Int64,IUnitary,IUnitary,IUnitary), QVoid>, ICallable
    {
        public DumpDiff(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IUnitary,IUnitary,IUnitary)>, IApplyData
        {
            public In((Int64,IUnitary,IUnitary,IUnitary) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "DumpDiff";
        String ICallable.FullName => "Quantum.Kata.BasicGates.DumpDiff";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Diagnostics__DumpMachine
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<(Int64,IUnitary,IUnitary,IUnitary), QVoid> __Body__ => (__in__) =>
        {
            var (N,statePrep,testImpl,refImpl) = __in__;
#line hidden
            {
#line 51 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                var qs = Allocate__.Apply(N);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 53 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    statePrep.Apply(qs);
#line 54 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Message__.Apply("The starting state:");
#line 55 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 58 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    refImpl.Apply(qs);
#line 59 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Message__.Apply("The desired state:");
#line 60 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 61 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    ResetAll__.Apply(qs);
#line 64 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    statePrep.Apply(qs);
#line 66 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    testImpl.Apply(qs);
#line 67 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Message__.Apply("The actual state:");
#line 68 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 69 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    ResetAll__.Apply(qs);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qs);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__Diagnostics__DumpMachine = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__((Int64,IUnitary,IUnitary,IUnitary) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 N, IUnitary statePrep, IUnitary testImpl, IUnitary refImpl)
        {
            return __m__.Run<DumpDiff, (Int64,IUnitary,IUnitary,IUnitary), QVoid>((N, statePrep, testImpl, refImpl));
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 74, 84)]
    public partial class DumpDiffOnOneQubit : Operation<(IUnitary,IUnitary), QVoid>, ICallable
    {
        public DumpDiffOnOneQubit(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IUnitary,IUnitary)>, IApplyData
        {
            public In((IUnitary,IUnitary) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "DumpDiffOnOneQubit";
        String ICallable.FullName => "Quantum.Kata.BasicGates.DumpDiffOnOneQubit";
        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary<(IUnitary,IQArray<Qubit>)> ArrayWrapper__
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Ry
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__ArcCos
        {
            get;
            set;
        }

        public override Func<(IUnitary,IUnitary), QVoid> __Body__ => (__in__) =>
        {
            var (testImpl,refImpl) = __in__;
#line 76 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((1L, ArrayWrapper__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg1__) => (Microsoft__Quantum__Intrinsic__Ry.Partial(new Func<Qubit, (Double,Qubit)>((__arg2__) => ((2D * Microsoft__Quantum__Math__ArcCos.Apply(0.6D)), __arg2__))), __arg1__))), ArrayWrapper__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg3__) => (testImpl, __arg3__))), ArrayWrapper__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg4__) => (refImpl, __arg4__)))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.ArrayWrapper__ = this.__Factory__.Get<IUnitary<(IUnitary,IQArray<Qubit>)>>(typeof(ArrayWrapper));
            this.Microsoft__Quantum__Intrinsic__Ry = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Ry));
            this.Microsoft__Quantum__Math__ArcCos = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.ArcCos));
        }

        public override IApplyData __DataIn__((IUnitary,IUnitary) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IUnitary testImpl, IUnitary refImpl)
        {
            return __m__.Run<DumpDiffOnOneQubit, (IUnitary,IUnitary), QVoid>((testImpl, refImpl));
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 84, 93)]
    public partial class T101_StateFlip : Operation<QVoid, QVoid>, ICallable
    {
        public T101_StateFlip(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T101_StateFlip")]
            public void T101_StateFlip()
#line 84 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T101_StateFlip, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 84 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T101_StateFlip";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T101_StateFlip";
        protected ICallable<(IUnitary,IUnitary), QVoid> DumpDiffOnOneQubit__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> StateFlip__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> StateFlip_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        protected IUnitary<(IUnitary,IQArray<Qubit>)> ArrayWrapperControlled__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 85 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiffOnOneQubit__.Apply((StateFlip__, StateFlip_Reference__));
#line 86 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((2L, ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg1__) => (StateFlip__, __arg1__))), ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg2__) => (StateFlip_Reference__, __arg2__)))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiffOnOneQubit__ = this.__Factory__.Get<ICallable<(IUnitary,IUnitary), QVoid>>(typeof(DumpDiffOnOneQubit));
            this.StateFlip__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(StateFlip));
            this.StateFlip_Reference__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(StateFlip_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
            this.ArrayWrapperControlled__ = this.__Factory__.Get<IUnitary<(IUnitary,IQArray<Qubit>)>>(typeof(ArrayWrapperControlled));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T101_StateFlip, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 93, 102)]
    public partial class T102_BasisChange : Operation<QVoid, QVoid>, ICallable
    {
        public T102_BasisChange(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T102_BasisChange")]
            public void T102_BasisChange()
#line 93 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T102_BasisChange, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 93 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T102_BasisChange";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T102_BasisChange";
        protected ICallable<(IUnitary,IUnitary), QVoid> DumpDiffOnOneQubit__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> BasisChange__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> BasisChange_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        protected IUnitary<(IUnitary,IQArray<Qubit>)> ArrayWrapperControlled__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 94 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiffOnOneQubit__.Apply((BasisChange__, BasisChange_Reference__));
#line 95 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((2L, ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg1__) => (BasisChange__, __arg1__))), ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg2__) => (BasisChange_Reference__, __arg2__)))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiffOnOneQubit__ = this.__Factory__.Get<ICallable<(IUnitary,IUnitary), QVoid>>(typeof(DumpDiffOnOneQubit));
            this.BasisChange__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(BasisChange));
            this.BasisChange_Reference__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(BasisChange_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
            this.ArrayWrapperControlled__ = this.__Factory__.Get<IUnitary<(IUnitary,IQArray<Qubit>)>>(typeof(ArrayWrapperControlled));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T102_BasisChange, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 102, 111)]
    public partial class T103_SignFlip : Operation<QVoid, QVoid>, ICallable
    {
        public T103_SignFlip(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T103_SignFlip")]
            public void T103_SignFlip()
#line 102 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T103_SignFlip, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 102 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T103_SignFlip";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T103_SignFlip";
        protected ICallable<(IUnitary,IUnitary), QVoid> DumpDiffOnOneQubit__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> SignFlip__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> SignFlip_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        protected IUnitary<(IUnitary,IQArray<Qubit>)> ArrayWrapperControlled__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 103 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiffOnOneQubit__.Apply((SignFlip__, SignFlip_Reference__));
#line 104 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((2L, ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg1__) => (SignFlip__, __arg1__))), ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg2__) => (SignFlip_Reference__, __arg2__)))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiffOnOneQubit__ = this.__Factory__.Get<ICallable<(IUnitary,IUnitary), QVoid>>(typeof(DumpDiffOnOneQubit));
            this.SignFlip__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(SignFlip));
            this.SignFlip_Reference__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(SignFlip_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
            this.ArrayWrapperControlled__ = this.__Factory__.Get<IUnitary<(IUnitary,IQArray<Qubit>)>>(typeof(ArrayWrapperControlled));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T103_SignFlip, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 111, 127)]
    public partial class T104_AmplitudeChange : Operation<QVoid, QVoid>, ICallable
    {
        public T104_AmplitudeChange(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T104_AmplitudeChange")]
            public void T104_AmplitudeChange()
#line 111 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T104_AmplitudeChange, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 111 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T104_AmplitudeChange";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T104_AmplitudeChange";
        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(IUnitary,IUnitary), QVoid> DumpDiffOnOneQubit__
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> AmplitudeChange__
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> AmplitudeChange_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        protected IUnitary<(IUnitary,IQArray<Qubit>)> ArrayWrapperControlled__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 113 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            var dumpAlpha = (((2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) * Microsoft__Quantum__Convert__IntAsDouble.Apply(6L)) / 36D);
#line 114 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Message__.Apply(String.Format("Applying amplitude change with alpha = {0}", dumpAlpha));
#line 115 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiffOnOneQubit__.Apply((AmplitudeChange__.Partial(new Func<Qubit, (Double,Qubit)>((__arg1__) => (dumpAlpha, __arg1__))), AmplitudeChange_Reference__.Partial(new Func<Qubit, (Double,Qubit)>((__arg2__) => (dumpAlpha, __arg2__)))));
#line 117 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            foreach (var i in new QRange(0L, 36L))
#line hidden
            {
#line 118 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                var alpha = (((2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) * Microsoft__Quantum__Convert__IntAsDouble.Apply(i)) / 36D);
#line 119 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((2L, ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg3__) => (AmplitudeChange__.Partial(new Func<Qubit, (Double,Qubit)>((__arg4__) => (alpha, __arg4__))), __arg3__))), ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg5__) => (AmplitudeChange_Reference__.Partial(new Func<Qubit, (Double,Qubit)>((__arg6__) => (alpha, __arg6__))), __arg5__)))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.DumpDiffOnOneQubit__ = this.__Factory__.Get<ICallable<(IUnitary,IUnitary), QVoid>>(typeof(DumpDiffOnOneQubit));
            this.AmplitudeChange__ = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(AmplitudeChange));
            this.AmplitudeChange_Reference__ = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(AmplitudeChange_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
            this.ArrayWrapperControlled__ = this.__Factory__.Get<IUnitary<(IUnitary,IQArray<Qubit>)>>(typeof(ArrayWrapperControlled));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T104_AmplitudeChange, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 127, 136)]
    public partial class T105_PhaseFlip : Operation<QVoid, QVoid>, ICallable
    {
        public T105_PhaseFlip(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T105_PhaseFlip")]
            public void T105_PhaseFlip()
#line 127 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T105_PhaseFlip, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 127 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T105_PhaseFlip";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T105_PhaseFlip";
        protected ICallable<(IUnitary,IUnitary), QVoid> DumpDiffOnOneQubit__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> PhaseFlip__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> PhaseFlip_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        protected IUnitary<(IUnitary,IQArray<Qubit>)> ArrayWrapperControlled__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 128 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiffOnOneQubit__.Apply((PhaseFlip__, PhaseFlip_Reference__));
#line 129 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((2L, ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg1__) => (PhaseFlip__, __arg1__))), ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg2__) => (PhaseFlip_Reference__, __arg2__)))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiffOnOneQubit__ = this.__Factory__.Get<ICallable<(IUnitary,IUnitary), QVoid>>(typeof(DumpDiffOnOneQubit));
            this.PhaseFlip__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(PhaseFlip));
            this.PhaseFlip_Reference__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(PhaseFlip_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
            this.ArrayWrapperControlled__ = this.__Factory__.Get<IUnitary<(IUnitary,IQArray<Qubit>)>>(typeof(ArrayWrapperControlled));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T105_PhaseFlip, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 136, 151)]
    public partial class T106_PhaseChange : Operation<QVoid, QVoid>, ICallable
    {
        public T106_PhaseChange(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T106_PhaseChange")]
            public void T106_PhaseChange()
#line 136 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T106_PhaseChange, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 136 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T106_PhaseChange";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T106_PhaseChange";
        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(IUnitary,IUnitary), QVoid> DumpDiffOnOneQubit__
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> PhaseChange__
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> PhaseChange_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        protected IUnitary<(IUnitary,IQArray<Qubit>)> ArrayWrapperControlled__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 137 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            var dumpAlpha = (((2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) * Microsoft__Quantum__Convert__IntAsDouble.Apply(10L)) / 36D);
#line 138 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Message__.Apply(String.Format("Applying phase change with alpha = {0}", dumpAlpha));
#line 139 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiffOnOneQubit__.Apply((PhaseChange__.Partial(new Func<Qubit, (Double,Qubit)>((__arg1__) => (dumpAlpha, __arg1__))), PhaseChange_Reference__.Partial(new Func<Qubit, (Double,Qubit)>((__arg2__) => (dumpAlpha, __arg2__)))));
#line 141 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            foreach (var i in new QRange(0L, 36L))
#line hidden
            {
#line 142 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                var alpha = (((2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) * Microsoft__Quantum__Convert__IntAsDouble.Apply(i)) / 36D);
#line 143 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((2L, ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg3__) => (PhaseChange__.Partial(new Func<Qubit, (Double,Qubit)>((__arg4__) => (alpha, __arg4__))), __arg3__))), ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg5__) => (PhaseChange_Reference__.Partial(new Func<Qubit, (Double,Qubit)>((__arg6__) => (alpha, __arg6__))), __arg5__)))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.DumpDiffOnOneQubit__ = this.__Factory__.Get<ICallable<(IUnitary,IUnitary), QVoid>>(typeof(DumpDiffOnOneQubit));
            this.PhaseChange__ = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(PhaseChange));
            this.PhaseChange_Reference__ = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(PhaseChange_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
            this.ArrayWrapperControlled__ = this.__Factory__.Get<IUnitary<(IUnitary,IQArray<Qubit>)>>(typeof(ArrayWrapperControlled));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T106_PhaseChange, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 151, 157)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Adjoint, 151, 157)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Controlled, 151, 157)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.ControlledAdjoint, 151, 157)]
    public partial class StatePrepForControlled : Unitary<IQArray<Qubit>>, ICallable
    {
        public StatePrepForControlled(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "StatePrepForControlled";
        String ICallable.FullName => "Quantum.Kata.BasicGates.StatePrepForControlled";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Ry
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__ArcCos
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var qs = __in__;
#line 152 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(qs[0L]);
#line 153 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__Ry.Apply(((2D * Microsoft__Quantum__Math__ArcCos.Apply(0.6D)), qs[1L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var qs = __in__;
#line 151 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__Ry.Adjoint.Apply(((2D * Microsoft__Quantum__Math__ArcCos.Apply(0.6D)), qs[1L]));
#line 151 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(qs[0L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,qs) = __in__;
#line 151 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__H.Controlled.Apply((__controlQubits__, qs[0L]));
#line 151 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__Ry.Controlled.Apply((__controlQubits__, ((2D * Microsoft__Quantum__Math__ArcCos.Apply(0.6D)), qs[1L])));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,qs) = __in__;
#line 151 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__Ry.Adjoint.Controlled.Apply((__controlQubits__, ((2D * Microsoft__Quantum__Math__ArcCos.Apply(0.6D)), qs[1L])));
#line 151 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Controlled.Apply((__controlQubits__, qs[0L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__Ry = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Ry));
            this.Microsoft__Quantum__Math__ArcCos = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.ArcCos));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> qs)
        {
            return __m__.Run<StatePrepForControlled, IQArray<Qubit>, QVoid>(qs);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 157, 174)]
    public partial class T107_GlobalPhaseChange : Operation<QVoid, QVoid>, ICallable
    {
        public T107_GlobalPhaseChange(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T107_GlobalPhaseChange")]
            public void T107_GlobalPhaseChange()
#line 157 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T107_GlobalPhaseChange, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 157 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T107_GlobalPhaseChange";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T107_GlobalPhaseChange";
        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> StatePrepForControlled__
        {
            get;
            set;
        }

        protected IUnitary<(IUnitary,IQArray<Qubit>)> ArrayWrapperControlled__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> GlobalPhaseChange__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> GlobalPhaseChange_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 159 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Message__.Apply("Showing effect of controlled-GlobalPhaseChange");
#line 160 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((2L, StatePrepForControlled__, ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg1__) => (GlobalPhaseChange__, __arg1__))), ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg2__) => (GlobalPhaseChange_Reference__, __arg2__)))));
#line 164 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((2L, ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg3__) => (GlobalPhaseChange__, __arg3__))), ArrayWrapperControlled__.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg4__) => (GlobalPhaseChange_Reference__, __arg4__)))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.StatePrepForControlled__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(StatePrepForControlled));
            this.ArrayWrapperControlled__ = this.__Factory__.Get<IUnitary<(IUnitary,IQArray<Qubit>)>>(typeof(ArrayWrapperControlled));
            this.GlobalPhaseChange__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(GlobalPhaseChange));
            this.GlobalPhaseChange_Reference__ = this.__Factory__.Get<IUnitary<Qubit>>(typeof(GlobalPhaseChange_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T107_GlobalPhaseChange, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 174, 192)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Adjoint, 174, 192)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Controlled, 174, 192)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.ControlledAdjoint, 174, 192)]
    public partial class StatePrep_BellState : Unitary<(IQArray<Qubit>,Int64)>, ICallable
    {
        public StatePrep_BellState(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        String ICallable.Name => "StatePrep_BellState";
        String ICallable.FullName => "Quantum.Kata.BasicGates.StatePrep_BellState";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (qs,state) = __in__;
#line 176 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(qs[0L]);
#line 177 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((qs[0L], qs[1L]));
#line 180 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            if (((state % 2L) == 1L))
            {
#line 182 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__Z.Apply(qs[1L]);
            }

#line 185 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            if (((state / 2L) == 1L))
            {
#line 186 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__X.Apply(qs[1L]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Int64), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (qs,state) = __in__;
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            if (((state / 2L) == 1L))
            {
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(qs[1L]);
            }

#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            if (((state % 2L) == 1L))
            {
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__Z.Adjoint.Apply(qs[1L]);
            }

#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((qs[0L], qs[1L]));
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(qs[0L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,Int64)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(qs,state)) = __in__;
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__H.Controlled.Apply((__controlQubits__, qs[0L]));
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Controlled.Apply((__controlQubits__, (qs[0L], qs[1L])));
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            if (((state % 2L) == 1L))
            {
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((__controlQubits__, qs[1L]));
            }

#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            if (((state / 2L) == 1L))
            {
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((__controlQubits__, qs[1L]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,Int64)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(qs,state)) = __in__;
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            if (((state / 2L) == 1L))
            {
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__X.Adjoint.Controlled.Apply((__controlQubits__, qs[1L]));
            }

#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            if (((state % 2L) == 1L))
            {
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__Z.Adjoint.Controlled.Apply((__controlQubits__, qs[1L]));
            }

#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Controlled.Apply((__controlQubits__, (qs[0L], qs[1L])));
#line 174 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__H.Adjoint.Controlled.Apply((__controlQubits__, qs[0L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> qs, Int64 state)
        {
            return __m__.Run<StatePrep_BellState, (IQArray<Qubit>,Int64), QVoid>((qs, state));
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 192, 215)]
    public partial class VerifyBellStateConversion : Operation<(IUnitary,Int64,Int64), QVoid>, ICallable
    {
        public VerifyBellStateConversion(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IUnitary,Int64,Int64)>, IApplyData
        {
            public In((IUnitary,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        String ICallable.Name => "VerifyBellStateConversion";
        String ICallable.FullName => "Quantum.Kata.BasicGates.VerifyBellStateConversion";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,Int64)> StatePrep_BellState__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Rest
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<(IUnitary,Int64,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (testOp,startState,targetState) = __in__;
#line hidden
            {
#line 194 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                var qs = Allocate__.Apply(3L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 195 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(qs[0L]);
#line 198 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    StatePrep_BellState__.Controlled.Apply((new QArray<Qubit>(qs[0L]), (Microsoft__Quantum__Arrays__Rest.Apply<IQArray<Qubit>>(qs), startState)));
#line 201 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    testOp.Controlled.Apply((new QArray<Qubit>(qs[0L]), Microsoft__Quantum__Arrays__Rest.Apply<IQArray<Qubit>>(qs)));
#line 204 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    StatePrep_BellState__.Adjoint.Controlled.Apply((new QArray<Qubit>(qs[0L]), (Microsoft__Quantum__Arrays__Rest.Apply<IQArray<Qubit>>(qs), targetState)));
#line 206 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(qs[0L]);
#line 209 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(qs);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qs);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.StatePrep_BellState__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,Int64)>>(typeof(StatePrep_BellState));
            this.Microsoft__Quantum__Arrays__Rest = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Rest<>));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__((IUnitary,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IUnitary testOp, Int64 startState, Int64 targetState)
        {
            return __m__.Run<VerifyBellStateConversion, (IUnitary,Int64,Int64), QVoid>((testOp, startState, targetState));
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 215, 223)]
    public partial class T108_BellStateChange1 : Operation<QVoid, QVoid>, ICallable
    {
        public T108_BellStateChange1(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T108_BellStateChange1")]
            public void T108_BellStateChange1()
#line 215 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T108_BellStateChange1, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 215 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T108_BellStateChange1";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T108_BellStateChange1";
        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,Int64)> StatePrep_BellState__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> BellStateChange1__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> BellStateChange1_Reference__
        {
            get;
            set;
        }

        protected ICallable<(IUnitary,Int64,Int64), QVoid> VerifyBellStateConversion__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 216 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((2L, StatePrep_BellState__.Partial(new Func<IQArray<Qubit>, (IQArray<Qubit>,Int64)>((__arg1__) => (__arg1__, 0L))), BellStateChange1__, BellStateChange1_Reference__));
#line 217 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            VerifyBellStateConversion__.Apply((BellStateChange1__, 0L, 1L));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.StatePrep_BellState__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,Int64)>>(typeof(StatePrep_BellState));
            this.BellStateChange1__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(BellStateChange1));
            this.BellStateChange1_Reference__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(BellStateChange1_Reference));
            this.VerifyBellStateConversion__ = this.__Factory__.Get<ICallable<(IUnitary,Int64,Int64), QVoid>>(typeof(VerifyBellStateConversion));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T108_BellStateChange1, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 223, 231)]
    public partial class T109_BellStateChange2 : Operation<QVoid, QVoid>, ICallable
    {
        public T109_BellStateChange2(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T109_BellStateChange2")]
            public void T109_BellStateChange2()
#line 223 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T109_BellStateChange2, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 223 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T109_BellStateChange2";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T109_BellStateChange2";
        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,Int64)> StatePrep_BellState__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> BellStateChange2__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> BellStateChange2_Reference__
        {
            get;
            set;
        }

        protected ICallable<(IUnitary,Int64,Int64), QVoid> VerifyBellStateConversion__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 224 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((2L, StatePrep_BellState__.Partial(new Func<IQArray<Qubit>, (IQArray<Qubit>,Int64)>((__arg1__) => (__arg1__, 0L))), BellStateChange2__, BellStateChange2_Reference__));
#line 225 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            VerifyBellStateConversion__.Apply((BellStateChange2__, 0L, 2L));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.StatePrep_BellState__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,Int64)>>(typeof(StatePrep_BellState));
            this.BellStateChange2__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(BellStateChange2));
            this.BellStateChange2_Reference__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(BellStateChange2_Reference));
            this.VerifyBellStateConversion__ = this.__Factory__.Get<ICallable<(IUnitary,Int64,Int64), QVoid>>(typeof(VerifyBellStateConversion));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T109_BellStateChange2, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 231, 239)]
    public partial class T110_BellStateChange3 : Operation<QVoid, QVoid>, ICallable
    {
        public T110_BellStateChange3(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T110_BellStateChange3")]
            public void T110_BellStateChange3()
#line 231 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T110_BellStateChange3, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 231 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T110_BellStateChange3";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T110_BellStateChange3";
        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,Int64)> StatePrep_BellState__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> BellStateChange3__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> BellStateChange3_Reference__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(IUnitary,Int64,Int64), QVoid> VerifyBellStateConversion__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 232 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((2L, StatePrep_BellState__.Partial(new Func<IQArray<Qubit>, (IQArray<Qubit>,Int64)>((__arg1__) => (__arg1__, 0L))), BellStateChange3__, BellStateChange3_Reference__));
#line 233 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Message__.Apply("If the desired and the actual states match but the test doesn't pass, check whether your solution introduces a global phase; it shouldn't!");
#line 234 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            VerifyBellStateConversion__.Apply((BellStateChange3__, 0L, 3L));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.StatePrep_BellState__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,Int64)>>(typeof(StatePrep_BellState));
            this.BellStateChange3__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(BellStateChange3));
            this.BellStateChange3_Reference__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(BellStateChange3_Reference));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.VerifyBellStateConversion__ = this.__Factory__.Get<ICallable<(IUnitary,Int64,Int64), QVoid>>(typeof(VerifyBellStateConversion));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T110_BellStateChange3, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 239, 244)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Adjoint, 239, 244)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Controlled, 239, 244)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.ControlledAdjoint, 239, 244)]
    public partial class StatePrepRy : Unitary<IQArray<Qubit>>, ICallable
    {
        public StatePrepRy(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "StatePrepRy";
        String ICallable.FullName => "Quantum.Kata.BasicGates.StatePrepRy";
        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Ry
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Head
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var qs = __in__;
#line 240 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__Ry.Apply((((2D * ((2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) * 6D)) / 36D), Microsoft__Quantum__Arrays__Head.Apply<Qubit>(qs)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var qs = __in__;
#line 239 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__Ry.Adjoint.Apply((((2D * ((2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) * 6D)) / 36D), Microsoft__Quantum__Arrays__Head.Apply<Qubit>(qs)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,qs) = __in__;
#line 239 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__Ry.Controlled.Apply((__controlQubits__, (((2D * ((2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) * 6D)) / 36D), Microsoft__Quantum__Arrays__Head.Apply<Qubit>(qs))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,qs) = __in__;
#line 239 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__Ry.Adjoint.Controlled.Apply((__controlQubits__, (((2D * ((2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) * 6D)) / 36D), Microsoft__Quantum__Arrays__Head.Apply<Qubit>(qs))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__Ry = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Ry));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Arrays__Head = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Head<>));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> qs)
        {
            return __m__.Run<StatePrepRy, IQArray<Qubit>, QVoid>(qs);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 244, 273)]
    public partial class T201_TwoQubitGate1 : Operation<QVoid, QVoid>, ICallable
    {
        public T201_TwoQubitGate1(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T201_TwoQubitGate1")]
            public void T201_TwoQubitGate1()
#line 244 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T201_TwoQubitGate1, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 244 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T201_TwoQubitGate1";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T201_TwoQubitGate1";
        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> StatePrepRy__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> TwoQubitGate1__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> TwoQubitGate1_Reference__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Ry
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 245 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((2L, StatePrepRy__, TwoQubitGate1__, TwoQubitGate1_Reference__));
#line hidden
            {
#line 249 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                var qs = Allocate__.Apply(2L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 250 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    foreach (var i in new QRange(0L, 36L))
#line hidden
                    {
#line 251 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                        var alpha = (((2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) * Microsoft__Quantum__Convert__IntAsDouble.Apply(i)) / 36D);
#line 255 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                        Microsoft__Quantum__Intrinsic__Ry.Apply(((2D * alpha), qs[0L]));
#line 259 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                        TwoQubitGate1__.Apply(qs);
#line 262 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                        TwoQubitGate1_Reference__.Adjoint.Apply(qs);
#line 244 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                        Microsoft__Quantum__Intrinsic__Ry.Adjoint.Apply(((2D * alpha), qs[0L]));
#line 266 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                        Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(qs);
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qs);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.StatePrepRy__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(StatePrepRy));
            this.TwoQubitGate1__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(TwoQubitGate1));
            this.TwoQubitGate1_Reference__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(TwoQubitGate1_Reference));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Intrinsic__Ry = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Ry));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T201_TwoQubitGate1, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 273, 294)]
    public partial class T202_TwoQubitGate2 : Operation<QVoid, QVoid>, ICallable
    {
        public T202_TwoQubitGate2(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T202_TwoQubitGate2")]
            public void T202_TwoQubitGate2()
#line 273 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T202_TwoQubitGate2, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 273 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T202_TwoQubitGate2";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T202_TwoQubitGate2";
        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary Microsoft__Quantum__Canon__ApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> TwoQubitGate2__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> TwoQubitGate2_Reference__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 274 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((2L, Microsoft__Quantum__Canon__ApplyToEachCA.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg1__) => (Microsoft__Quantum__Intrinsic__H, __arg1__))), TwoQubitGate2__, TwoQubitGate2_Reference__));
#line hidden
            {
#line 275 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                var qs = Allocate__.Apply(2L);
#line hidden
                bool __arg2__ = true;
                try
                {
#line 278 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__H, qs));
#line 281 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    TwoQubitGate2__.Apply(qs);
#line 284 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    TwoQubitGate2_Reference__.Adjoint.Apply(qs);
#line 273 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, qs));
#line 288 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(qs);
                }
#line hidden
                catch
                {
                    __arg2__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg2__)
                    {
#line hidden
                        Release__.Apply(qs);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.Microsoft__Quantum__Canon__ApplyToEachCA = this.__Factory__.Get<IUnitary>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.TwoQubitGate2__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(TwoQubitGate2));
            this.TwoQubitGate2_Reference__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(TwoQubitGate2_Reference));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T202_TwoQubitGate2, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 294, 303)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Adjoint, 294, 303)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Controlled, 294, 303)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.ControlledAdjoint, 294, 303)]
    public partial class StatePrepMiscAmplitudes : Unitary<IQArray<Qubit>>, ICallable
    {
        public StatePrepMiscAmplitudes(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "StatePrepMiscAmplitudes";
        String ICallable.FullName => "Quantum.Kata.BasicGates.StatePrepMiscAmplitudes";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Ry
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var qs = __in__;
#line 295 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            var alphas = (IQArray<Double>)new QArray<Double>(5D, 10D, 15D);
#line 296 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            foreach (var index in new QRange(0L, (qs.Length - 1L)))
#line hidden
            {
#line 297 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__Ry.Apply(((2D * (alphas[index] + Microsoft__Quantum__Convert__IntAsDouble.Apply((index + 1L)))), qs[index]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var qs = __in__;
#line 294 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            var __qsVar0__alphas__ = (IQArray<Double>)new QArray<Double>(5D, 10D, 15D);
#line 294 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            foreach (var __qsVar1__index__ in RangeReverse__.Apply(new QRange(0L, (qs.Length - 1L))))
#line hidden
            {
#line 294 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__Ry.Adjoint.Apply(((2D * (__qsVar0__alphas__[__qsVar1__index__] + Microsoft__Quantum__Convert__IntAsDouble.Apply((__qsVar1__index__ + 1L)))), qs[__qsVar1__index__]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,qs) = __in__;
#line 294 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            var alphas = (IQArray<Double>)new QArray<Double>(5D, 10D, 15D);
#line 294 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            foreach (var index in new QRange(0L, (qs.Length - 1L)))
#line hidden
            {
#line 294 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__Ry.Controlled.Apply((__controlQubits__, ((2D * (alphas[index] + Microsoft__Quantum__Convert__IntAsDouble.Apply((index + 1L)))), qs[index])));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,qs) = __in__;
#line 294 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            var __qsVar0__alphas__ = (IQArray<Double>)new QArray<Double>(5D, 10D, 15D);
#line 294 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            foreach (var __qsVar1__index__ in RangeReverse__.Apply(new QRange(0L, (qs.Length - 1L))))
#line hidden
            {
#line 294 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                Microsoft__Quantum__Intrinsic__Ry.Adjoint.Controlled.Apply((__controlQubits__, ((2D * (__qsVar0__alphas__[__qsVar1__index__] + Microsoft__Quantum__Convert__IntAsDouble.Apply((__qsVar1__index__ + 1L)))), qs[__qsVar1__index__])));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__Ry = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Ry));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> qs)
        {
            return __m__.Run<StatePrepMiscAmplitudes, IQArray<Qubit>, QVoid>(qs);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 303, 308)]
    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Adjoint, 303, 308)]
    public partial class SwapWrapper : Adjointable<IQArray<Qubit>>, ICallable
    {
        public SwapWrapper(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "SwapWrapper";
        String ICallable.FullName => "Quantum.Kata.BasicGates.SwapWrapper";
        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__SWAP
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var qs = __in__;
#line 304 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__SWAP.Apply((qs[0L], qs[1L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var qs = __in__;
#line 303 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Intrinsic__SWAP.Adjoint.Apply((qs[0L], qs[1L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__SWAP = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.SWAP));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> qs)
        {
            return __m__.Run<SwapWrapper, IQArray<Qubit>, QVoid>(qs);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 308, 317)]
    public partial class T203_TwoQubitGate3 : Operation<QVoid, QVoid>, ICallable
    {
        public T203_TwoQubitGate3(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T203_TwoQubitGate3")]
            public void T203_TwoQubitGate3()
#line 308 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T203_TwoQubitGate3, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 308 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T203_TwoQubitGate3";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T203_TwoQubitGate3";
        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> StatePrepMiscAmplitudes__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> TwoQubitGate3__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> TwoQubitGate3_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        protected IAdjointable<IQArray<Qubit>> SwapWrapper__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 309 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((2L, StatePrepMiscAmplitudes__, TwoQubitGate3__, TwoQubitGate3_Reference__));
#line 310 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((2L, SwapWrapper__, TwoQubitGate3_Reference__));
#line 311 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((2L, TwoQubitGate3__, TwoQubitGate3_Reference__));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.StatePrepMiscAmplitudes__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(StatePrepMiscAmplitudes));
            this.TwoQubitGate3__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(TwoQubitGate3));
            this.TwoQubitGate3_Reference__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(TwoQubitGate3_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
            this.SwapWrapper__ = this.__Factory__.Get<IAdjointable<IQArray<Qubit>>>(typeof(SwapWrapper));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T203_TwoQubitGate3, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 317, 325)]
    public partial class T204_ToffoliGate : Operation<QVoid, QVoid>, ICallable
    {
        public T204_ToffoliGate(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T204_ToffoliGate")]
            public void T204_ToffoliGate()
#line 317 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T204_ToffoliGate, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 317 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T204_ToffoliGate";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T204_ToffoliGate";
        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> StatePrepMiscAmplitudes__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> ToffoliGate__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> ToffoliGate_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 318 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((3L, StatePrepMiscAmplitudes__, ToffoliGate__, ToffoliGate_Reference__));
#line 319 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((3L, ToffoliGate__, ToffoliGate_Reference__));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.StatePrepMiscAmplitudes__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(StatePrepMiscAmplitudes));
            this.ToffoliGate__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(ToffoliGate));
            this.ToffoliGate_Reference__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(ToffoliGate_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T204_ToffoliGate, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs", OperationFunctor.Body, 325, -1)]
    public partial class T205_FredkinGate : Operation<QVoid, QVoid>, ICallable
    {
        public T205_FredkinGate(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "T205_FredkinGate")]
            public void T205_FredkinGate()
#line 325 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<T205_FredkinGate, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 325 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "T205_FredkinGate";
        String ICallable.FullName => "Quantum.Kata.BasicGates.T205_FredkinGate";
        protected ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid> DumpDiff__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> StatePrepMiscAmplitudes__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> FredkinGate__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> FredkinGate_Reference__
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable,IAdjointable), QVoid> Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 326 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            DumpDiff__.Apply((3L, StatePrepMiscAmplitudes__, FredkinGate__, FredkinGate_Reference__));
#line 327 "C:\\Users\\zacha\\Dev\\Microsoft-Quantum-Katas\\BasicGates\\Tests.qs"
            Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced.Apply((3L, FredkinGate__, FredkinGate_Reference__));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.DumpDiff__ = this.__Factory__.Get<ICallable<(Int64,IUnitary,IUnitary,IUnitary), QVoid>>(typeof(DumpDiff));
            this.StatePrepMiscAmplitudes__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(StatePrepMiscAmplitudes));
            this.FredkinGate__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(FredkinGate));
            this.FredkinGate_Reference__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(FredkinGate_Reference));
            this.Microsoft__Quantum__Diagnostics__AssertOperationsEqualReferenced = this.__Factory__.Get<ICallable<(Int64,ICallable,IAdjointable), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<T205_FredkinGate, QVoid, QVoid>(QVoid.Instance);
        }
    }
}